name: is-next-compat

# ! If you want to use this workflow, the following secrets must be defined:
# ! - MONGODB_URI
# ! - GH_TOKEN

on:
  workflow_dispatch: # * Treated like a scheduled run
  schedule:
    - cron: '0 12 */1 * *'

env:
  # * Selectively enable debugger verbose output in the pipeline
  # ? See also: https://www.npmjs.com/package/debug#wildcards
  DEBUG: 'next-test-api-route-handler:*'
  #NODE_CURRENT_VERSION: 18.x
  #NODE_OLDER_VERSIONS: '"12.x", "14.x", "16.x"'
  NODE_CURRENT_VERSION: 16.x
  NODE_OLDER_VERSIONS: '"12.x", "14.x"'

jobs:
  metadata:
    name: 'gather-metadata'
    runs-on: ubuntu-latest
    outputs:
      node-matrix: ${{ steps.set-matrix.outputs.node-matrix }}
    steps:
      - name: Report mode statuses
        run: |
          if [ -n "$DEBUG" ]; then
            echo "IS-NEXT-COMPAT IS RUNNING IN DEBUG MODE ($DEBUG)"
          else
            echo '(is-next-compat is not running in debug mode)'
          fi

      - name: Gather metadata
        id: set-matrix
        run: |
          echo "::set-output name=node-matrix::{\"node\":[$NODE_OLDER_VERSIONS, \"$NODE_CURRENT_VERSION\"]}"
          ! [ -z "$DEBUG" ] && echo "set-output name=node-matrix::{\"node\":[$NODE_OLDER_VERSIONS, \"$NODE_CURRENT_VERSION\"]}" || true

  check-compat:
    runs-on: ubuntu-latest
    needs: metadata
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.metadata.outputs.node-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          persist-credentials: false

      # See: https://github.com/actions/setup-node/issues/214#issuecomment-810829250
      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://github.com/".insteadOf
          ssh://git@github.com/

      - name: Use node ${{ matrix.node }}
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ matrix.node }}

      - name: Cache npm
        uses: actions/cache@v2.1.6
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: |
          npm ci
          npm install --no-save semver
          # ? Install peer deps manually for ancient node versions
          if [ `node -e 'console.log(require("semver").satisfies(process.versions.node, "<15"))'` == 'true' ]; then
            PEER_DEPS=$(node -e 'console.log(Object.entries(require("./package.json").peerDependencies || {}).map(([p,v]) => `${p}@${v}`).join(" "))')
            ! [ -z "$DEBUG" ] && echo "(peer install targets) PEER_DEPS='$PEER_DEPS'" || true
            ! [ -z "$PEER_DEPS" ] && npm install --no-save $PEER_DEPS || true
          fi

      - name: Build distributables
        run: npm run build-dist

      - name: Build externals
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          NODE_TARGET_VERSION: ${{ env.NODE_CURRENT_VERSION }}

        run: npm run build-externals

      - name: Run is-next-compat
        run: node external-scripts/bin/is-next-compat.js &> /tmp/output.txt

      - name: Upload output artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: output-node-${{ matrix.node }}-${{ github.sha }}
          path: /tmp/output.txt
          if-no-files-found: error
          retention-days: 1
